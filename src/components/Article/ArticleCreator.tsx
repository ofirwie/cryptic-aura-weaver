import React, { useState } from 'react'
import { ArticleEditor } from './ArticleEditor'
import { ArticleService } from '../../services/articleService'
import { Article } from '../../types/content'

interface ArticleCreatorProps {
  isOpen: boolean
  onClose: () => void
  onSuccess: (article: Article) => void
}

export const ArticleCreator: React.FC<ArticleCreatorProps> = ({
  isOpen,
  onClose,
  onSuccess
}) => {
  const [title, setTitle] = useState('')
  const [content, setContent] = useState('')
  const [excerpt, setExcerpt] = useState('')
  const [author, setAuthor] = useState('')
  const [category, setCategory] = useState('')
  const [tags, setTags] = useState('')
  const [youtubeVideoId, setYoutubeVideoId] = useState('')
  const [featuredImage, setFeaturedImage] = useState('')
  const [featured, setFeatured] = useState(false)
  const [saving, setSaving] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleYouTubeUrl = (url: string) => {
    const videoId = ArticleService.extractYouTubeId(url)
    setYoutubeVideoId(videoId || '')
  }

  const handleSave = async (status: 'draft' | 'published') => {
    if (!title.trim() || !content.trim() || !author.trim()) {
      setError('Title, content, and author are required')
      return
    }

    try {
      setSaving(true)
      setError(null)

      // Auto-generate excerpt if not provided
      const finalExcerpt = excerpt.trim() || ArticleService.generateExcerpt(content, 200)

      // Parse tags
      const tagArray = tags.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0)

      const articleData = {
        title: title.trim(),
        slug: '', // Will be auto-generated by database trigger
        content: content.trim(),
        excerpt: finalExcerpt,
        featured_image: featuredImage.trim() || undefined,
        youtube_video_id: youtubeVideoId.trim() || undefined,
        author: author.trim(),
        category: category.trim() || undefined,
        tags: tagArray.length > 0 ? tagArray : undefined,
        status,
        featured,
        published_at: status === 'published' ? new Date().toISOString() : undefined
      }

      const article = await ArticleService.createArticle(articleData)
      onSuccess(article)
      handleClose()
    } catch (err) {
      console.error('Error saving article:', err)
      setError(err instanceof Error ? err.message : 'Failed to save article')
    } finally {
      setSaving(false)
    }
  }

  const handleClose = () => {
    // Reset form
    setTitle('')
    setContent('')
    setExcerpt('')
    setAuthor('')
    setCategory('')
    setTags('')
    setYoutubeVideoId('')
    setFeaturedImage('')
    setFeatured(false)
    setError(null)
    onClose()
  }

  if (!isOpen) return null

  return (
    <div style={{
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      alignItems: 'flex-start',
      justifyContent: 'center',
      zIndex: 1000,
      overflowY: 'auto',
      padding: '20px'
    }}>
      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        width: '100%',
        maxWidth: '900px',
        maxHeight: '90vh',
        overflowY: 'auto',
        position: 'relative'
      }}>
        {/* Header */}
        <div style={{
          padding: '24px 32px',
          borderBottom: '1px solid #e2e8f0',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          position: 'sticky',
          top: 0,
          backgroundColor: 'white',
          zIndex: 1
        }}>
          <h2 style={{
            fontSize: '24px',
            fontWeight: '600',
            margin: 0
          }}>
            Create New Article
          </h2>
          <button
            onClick={handleClose}
            style={{
              backgroundColor: 'transparent',
              border: 'none',
              fontSize: '24px',
              cursor: 'pointer',
              color: '#64748b',
              padding: '4px',
              borderRadius: '4px'
            }}
          >
            ×
          </button>
        </div>

        {/* Content */}
        <div style={{ padding: '32px' }}>
          {error && (
            <div style={{
              backgroundColor: '#fef2f2',
              border: '1px solid #fecaca',
              color: '#dc2626',
              padding: '12px 16px',
              borderRadius: '8px',
              marginBottom: '24px'
            }}>
              {error}
            </div>
          )}

          {/* Article Details */}
          <div style={{
            display: 'grid',
            gridTemplateColumns: '1fr 1fr',
            gap: '16px',
            marginBottom: '24px'
          }}>
            {/* Title */}
            <div style={{ gridColumn: '1 / -1' }}>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                marginBottom: '8px'
              }}>
                Title *
              </label>
              <input
                type="text"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Enter article title"
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '16px',
                  outline: 'none',
                  transition: 'border-color 0.2s'
                }}
                onFocus={(e) => e.currentTarget.style.borderColor = '#3b82f6'}
                onBlur={(e) => e.currentTarget.style.borderColor = '#d1d5db'}
              />
            </div>

            {/* Author */}
            <div>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                marginBottom: '8px'
              }}>
                Author *
              </label>
              <input
                type="text"
                value={author}
                onChange={(e) => setAuthor(e.target.value)}
                placeholder="Your name"
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>

            {/* Category */}
            <div>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                marginBottom: '8px'
              }}>
                Category
              </label>
              <input
                type="text"
                value={category}
                onChange={(e) => setCategory(e.target.value)}
                placeholder="e.g. AI, Technology, Tutorial"
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>

            {/* Tags */}
            <div style={{ gridColumn: '1 / -1' }}>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                marginBottom: '8px'
              }}>
                Tags
              </label>
              <input
                type="text"
                value={tags}
                onChange={(e) => setTags(e.target.value)}
                placeholder="Separate tags with commas: AI, machine learning, tutorial"
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>

            {/* YouTube Video */}
            <div>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                marginBottom: '8px'
              }}>
                Main YouTube Video
              </label>
              <input
                type="text"
                onChange={(e) => handleYouTubeUrl(e.target.value)}
                placeholder="Paste YouTube URL for main video"
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
              {youtubeVideoId && (
                <div style={{
                  marginTop: '8px',
                  fontSize: '12px',
                  color: '#10b981'
                }}>
                  ✓ Video ID extracted: {youtubeVideoId}
                </div>
              )}
            </div>

            {/* Featured Image */}
            <div>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                marginBottom: '8px'
              }}>
                Featured Image URL
              </label>
              <input
                type="text"
                value={featuredImage}
                onChange={(e) => setFeaturedImage(e.target.value)}
                placeholder="https://example.com/image.jpg"
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px'
                }}
              />
            </div>

            {/* Excerpt */}
            <div style={{ gridColumn: '1 / -1' }}>
              <label style={{
                display: 'block',
                fontSize: '14px',
                fontWeight: '500',
                marginBottom: '8px'
              }}>
                Excerpt (Optional)
              </label>
              <textarea
                value={excerpt}
                onChange={(e) => setExcerpt(e.target.value)}
                placeholder="Brief summary for article preview (auto-generated if left empty)"
                rows={3}
                style={{
                  width: '100%',
                  padding: '12px 16px',
                  border: '1px solid #d1d5db',
                  borderRadius: '8px',
                  fontSize: '14px',
                  resize: 'vertical',
                  fontFamily: 'inherit'
                }}
              />
            </div>

            {/* Featured Toggle */}
            <div style={{ gridColumn: '1 / -1' }}>
              <label style={{
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                cursor: 'pointer'
              }}>
                <input
                  type="checkbox"
                  checked={featured}
                  onChange={(e) => setFeatured(e.target.checked)}
                  style={{ cursor: 'pointer' }}
                />
                <span style={{ fontSize: '14px', fontWeight: '500' }}>
                  Feature on home page
                </span>
              </label>
            </div>
          </div>

          {/* Content Editor */}
          <div>
            <label style={{
              display: 'block',
              fontSize: '14px',
              fontWeight: '500',
              marginBottom: '8px'
            }}>
              Content *
            </label>
            <ArticleEditor
              content={content}
              onChange={setContent}
              placeholder="Write your article content here. Use the toolbar to format text and embed YouTube videos."
            />
          </div>

          {/* Actions */}
          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            marginTop: '32px',
            paddingTop: '24px',
            borderTop: '1px solid #e2e8f0'
          }}>
            <button
              onClick={handleClose}
              disabled={saving}
              style={{
                backgroundColor: 'transparent',
                color: '#64748b',
                border: '1px solid #d1d5db',
                padding: '12px 24px',
                borderRadius: '8px',
                cursor: saving ? 'not-allowed' : 'pointer',
                fontSize: '14px',
                fontWeight: '500',
                opacity: saving ? 0.5 : 1
              }}
            >
              Cancel
            </button>

            <div style={{ display: 'flex', gap: '12px' }}>
              <button
                onClick={() => handleSave('draft')}
                disabled={saving || !title.trim() || !content.trim() || !author.trim()}
                style={{
                  backgroundColor: saving ? '#9ca3af' : '#64748b',
                  color: 'white',
                  border: 'none',
                  padding: '12px 24px',
                  borderRadius: '8px',
                  cursor: saving || !title.trim() || !content.trim() || !author.trim() ? 'not-allowed' : 'pointer',
                  fontSize: '14px',
                  fontWeight: '500',
                  opacity: saving || !title.trim() || !content.trim() || !author.trim() ? 0.5 : 1
                }}
              >
                {saving ? 'Saving...' : 'Save as Draft'}
              </button>

              <button
                onClick={() => handleSave('published')}
                disabled={saving || !title.trim() || !content.trim() || !author.trim()}
                style={{
                  backgroundColor: saving ? '#9ca3af' : '#10b981',
                  color: 'white',
                  border: 'none',
                  padding: '12px 24px',
                  borderRadius: '8px',
                  cursor: saving || !title.trim() || !content.trim() || !author.trim() ? 'not-allowed' : 'pointer',
                  fontSize: '14px',
                  fontWeight: '500',
                  opacity: saving || !title.trim() || !content.trim() || !author.trim() ? 0.5 : 1
                }}
              >
                {saving ? 'Publishing...' : 'Publish Article'}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}